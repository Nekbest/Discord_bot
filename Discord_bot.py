import disnake
from disnake.ext import commands
from pymorphy3 import MorphAnalyzer
from random import shuffle, randint
from requests import get

emoji = ['üõÅ', 'üö¥', 'üöÄ', 'üöÅ', 'üöÇ', 'üöÉ', 'üöå', 'üöé', 'üöë', 'üöí', 'üöì', 'ü¶Ü', 'üöï', 'ü¶ö', 'ü¶û', 'üöó',
         'ü¶ë', 'üöö', 'ü¶¢', 'ü¶ü', 'ü¶†', 'ü¶Ö', 'ü¶Ä', 'ü¶ó', 'ü¶ã', 'üöú', 'ü¶á', 'ü¶î', 'ü¶ì', 'üö£', 'ü¶í', 'ü¶é',
         'üö∂', 'üõå', 'üõí', 'üõ©', 'üõ∞', 'üõ∏', 'ü§î', 'ü§ê', 'ü§ì', 'ü§°', 'ü§´', 'ü•ê', 'ü•ï', 'ü•ù', 'ü•¶', 'ü•æ']
score = {'user': 0, 'bot': 0}
options = {"start": False, "name": "first__bot#9206"}


class MyBot(commands.Cog):

    def __init__(self, bot):
        self.bot = bot
        self.morph = MorphAnalyzer()

    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏–π –≤ Cog(@bot.event)
    @commands.Cog.listener()
    async def on_ready(self):
        print(f"–ë–æ—Ç {self.bot.user} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!")

    # –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥(@bot.command)
    @commands.command()
    async def help(self, ctx):
        await ctx.send("–Ø –º–æ–≥—É:\n" +
                       "1. –°–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞—Ç—å —Å–ª–æ–≤–∞ —Å —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã–º–∏.(/approve)\n" +
                       "2. –û–ø—Ä–µ–¥–µ–ª—è—Ç—å, –∂–∏–≤–æ–µ –ª–∏ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –∏–ª–∏ –Ω–µ—Ç.(/alive_or_not)\n" +
                       "3. –ú–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –ø–∞–¥–µ–∂–æ–º –∏ —á–∏—Å–ª–æ–º.(/case_and_number)\n" +
                       "4. –í—ã–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞ –≤ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ.(–∫–æ–º–∞–Ω–¥–∞ /initial_form)\n" +
                       "5. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–≤–∞.(/morph_analys)\n" +
                       "6. –ò–≥—Ä–∞ –≤ —ç–º–æ—Ü–∏–∏.(/start_game_emoji)\n" +
                       "7. –ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ —ç–º–æ—Ü–∏–∏.(/rule_emoji)")

    @commands.slash_command()
    async def approve(self, inter: disnake.ApplicationCommandInteraction, number: int, word: str):
        comment = self.morph.parse(word)[0]
        await inter.send(f"{number} {comment.make_agree_with_number(number).word}")

    @commands.slash_command()
    async def alive_or_not(self, inter: disnake.ApplicationCommandInteraction, word: str):
        comment = self.morph.parse(word)[0]
        if comment.tag.POS == "NOUN" and comment.tag.animacy == "anim":
            await inter.send(f"–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ {word} –∂–∏–≤–æ–µ!")
        elif comment.tag.POS == "NOUN" and comment.tag.animacy == "inan":
            await inter.send(f"–°—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ {word} –Ω–µ–∂–∏–≤–æ–µ!")
        else:
            await inter.send(f"–°–ª–æ–≤–æ {word} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º!")

    @commands.slash_command()
    async def case_and_number(self, inter: disnake.ApplicationCommandInteraction, word: str, case: str, number: str):
        case = case.lower()
        number = number.lower()
        comment = self.morph.parse(word)[0]
        inclined = ["NOUN", "ADJF", "NPRO", "NUMR"]
        numbers = {"–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ": "plur", "–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ": "sing"}
        cases = {"–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "nomn", "—Ä–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π": "gent", "–¥–∞—Ç–µ–ª—å–Ω—ã–π": "datv",
                 "–≤–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–π": "accs", "—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π": "ablt", "–ø—Ä–µ–¥–ª–æ–∂–Ω—ã–π": "loct"}
        if comment.tag.POS in inclined:
            await inter.send(f"–°–ª–æ–≤–æ {word.upper()} –≤ {case[:-2]}–æ–º –ø–∞–¥–µ–∂–µ –∏ {number[:-2]}–æ–º —á–∏—Å–ª–µ:" +
                             f"{comment.inflect({numbers[number], cases[case]}).word}")
        else:
            await inter.send("–ù–µ —Å–∫–ª–æ–Ω—è–µ–º–∞—è —á–∞—Å—Ç—å —Ä–µ—á–∏!")

    @commands.slash_command()
    async def initial_form(self, inter: disnake.ApplicationCommandInteraction, word: str):
        await inter.send(f"–ù–∞—á–∞–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–ª–æ–≤–∞ {word} - {self.morph.parse(word)[0].normal_form}")

    @commands.Cog.listener()
    async def on_message(self, msg):
        if msg.content == "/start_game_emoji" and options["start"] != 1:
            options["name"] = msg.author
            options["start"] = True
            shuffle(emoji)
            await msg.channel.send('–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!\n–ï—Å–ª–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /rule_emoji')
        elif msg.content == '/stop' and options["name"] == msg.author:
            options["name"] = "first__bot#9206"
            options["start"] = False
            score['user'] = 0
            score['bot'] = 0
            await msg.channel.send('–ü–æ–∫–∞!')
        elif msg.content == '/rule_emoji' and options["name"] == msg.author:
            await msg.channel.send('–£ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –µ—Å—Ç—å –≤ –∑–∞–ø–∞—Å–µ –º–Ω–æ–≥–æ —Å–º–∞–π–ª–∏–∫–æ–≤.\n' +
                                   '–ü–æ –æ—á–µ—Ä–µ–¥–∏ —Å –±–æ—Ç–æ–º –±—É–¥–µ–º –Ω–∞–∑—ã–≤–∞—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ' +
                                   '‚Äî –Ω–æ–º–µ—Ä —Å–º–∞–π–ª–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã—Ç–∞—â–∏—Ç—å –∏–∑ –∑–∞–ø–∞—Å–∞.\n' +
                                   '–ï—Å–ª–∏ –Ω–æ–º–µ—Ä –±–æ–ª—å—à–µ, —á–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤ –∑–∞–ø–∞—Å–µ —Å–º–∞–π–ª–∏–∫–æ–≤' +
                                   ', —Ç–æ –±–µ—Ä–µ—Ç—Å—è –Ω–æ–º–µ—Ä,' +
                                   '—Ä–∞–≤–Ω—ã–π –æ—Å—Ç–∞—Ç–∫—É –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è.\n' +
                                   '–í –∫–∞–∂–¥–æ–π –ø–∞—Ä–µ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è unicode-—Å–∏–º–≤–æ–ª–æ–≤' +
                                   '–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—É–Ω–¥–∞.\n' +
                                   '–ü–æ—Å–ª–µ —Ä–∞—É–Ω–¥–∞ —Å–º–∞–π–ª—ã –ø–µ—Ä–µ–º–µ—à–∏–≤–∞—é—Ç—Å—è, –≤—ã–≤–æ–¥—è—Ç—Å—è —Å–º–∞–π–ª—ã,' +
                                   '–≤—ã—Ç–∞—â–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏ –±–æ—Ç–æ–º, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—É—â–∏–π —Å—á—ë—Ç.\n' +
                                   '–ò–≥—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–º–∞–π–ª–∏–∫–∞ –∏–ª–∏ –¥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è /stop.\n' +
                                   '–ü–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –≤—ã–≤–æ–¥–∏—Ç—Å—è —á–µ–º–ø–∏–æ–Ω. –ü—Ä–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥–æ–π /stop —Å—á—ë—Ç –æ–±–Ω—É–ª—è–µ—Ç—Å—è.\n')
        elif options["start"] == 1 and options["name"] == msg.author:
            try:
                if emoji:
                    bot_choice = randint(0, 100) % len(emoji)
                    msg.content = int(msg.content) % len(emoji)
                    await msg.channel.send(f"–ò—Ç–æ–≥–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤–∞—à–µ–π —ç–º–æ—Ü–∏–∏: {msg.content}")
                    await msg.channel.send(f"–ù–æ–º–µ—Ä —ç–º–æ—Ü–∏–∏ –±–æ—Ç–∞: {bot_choice}")
                    await msg.channel.send(f"–í–∞—à–∞ —ç–º–æ—Ü–∏—è {emoji[msg.content]}")
                    emoji.pop(msg.content)
                    await msg.channel.send(f"–≠–º–æ—Ü–∏—è –±–æ—Ç–∞: {emoji[bot_choice]}")
                    emoji.pop(bot_choice)
                    if msg.content > bot_choice:
                        score["user"] += 1
                    elif bot_choice > msg.content:
                        score["bot"] += 1
                    await msg.channel.send(f'–¢—ã: {score["user"]} - –ë–æ—Ç: {score["bot"]}')
                else:
                    raise IndexError
            except IndexError:
                if score["user"] > score["bot"]:
                    await msg.channel.send(f'–≠–º–æ—Ü–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ã {score["user"]} - –ë–æ—Ç {score["bot"]}\n' +
                                           '–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!')
                elif score["user"] < score["bot"]:
                    await msg.channel.send(f'–≠–º–æ—Ü–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ã {score["user"]} - –ë–æ—Ç {score["bot"]}\n' +
                                           '–ë–æ—Ç –ø–æ–±–µ–¥–∏–ª!')
                else:
                    await msg.channel.send(f'–≠–º–æ—Ü–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å!\n–†–µ–∑—É–ª—å—Ç–∞—Ç: –í—ã {score["user"]} - –ë–æ—Ç {score["bot"]}\n' +
                                           '–ù–∏—á—å—è!')
                options["name"] = "first__bot#9206"
                options["start"] = False
                score['user'] = 0
                score['bot'] = 0
            except Exception as e:
                await msg.channel.send('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥!')



def setup(bot):
    bot.add_cog(MyBot(bot))
